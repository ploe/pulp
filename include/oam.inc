	IF !DEF(_PULP_OAM_INC)
_PULP_OAM_INC SET 1

TILE_SIZE EQU 16

; Struct for Sprite
RSRESET
SPRITE_OFFSET RB 0
SPRITE_Y RB 1
SPRITE_X RB 1
SPRITE_ATTRIBUTES RB 0
SPRITE_TILE RB 1
SPRITE_FLAGS RB 1
OAM_OBJECT_SIZE RB 0
SPRITE_FRAME RW 1
SPRITE_INTERVAL RB 1
SPRITE_TILE_DST RW 1
SPRITE_TILE_SRC RW 1
SPRITE_BANK RW 1
SPRITE_OAM_BUFFER RW 1
SPRITE_STATUS RB 1
SPRITE_SIZE RB 0

; Sprite flags
SPRITE_FLAG_UPDATED EQU 0

; Constants
SPRITE_BANK_TOTAL EQU 12
SPRITE_BANK_SIZE EQU (TILE_SIZE * SPRITE_BANK_TOTAL)

RSRESET
SPRITE_BUFFER_TOP RB 1
SPRITE_BUFFER_FLAGS RB 1
SPRITE_BUFFER_DATA RB SPRITE_BANK_SIZE
SPRITE_BUFFER_SIZE RB 0

; Flags
SPRITE_BUFFER_FLAG_REFRESH EQU 0

OAM_LIMIT EQU 40

OAM_SET: MACRO
; Using the offset in SPRITE_TILE calculate the location of the
; SPRITE_OAM_BUFFER
; \1 ~> Sprite
	MEMBER_PEEK_BYTE (\1 + SPRITE_TILE)

	; Multiply Tile by 4 as that's the Size of an OAM Object
	ld d, 0
	ld e, a
	sla e
	sla e

	; Get the new offset
	ld hl, Oam_Buffer
	add hl, de

	; Store the Oam Buffer offet
	ld d, h
	ld e, l
	MEMBER_POKE_WORD (\1 + SPRITE_OAM_BUFFER)

	ENDM

RSRESET
FRAME_INTERVAL RB 1
FRAME_NEXT_REEL RB 0
FRAME_TILE_SRC RW 1
FRAME_SPRITE_FLAGS RB 1
FRAME_SIZE RB 0

REEL_SENTINEL EQU 0

REEL_JUMP: MACRO
	db REEL_SENTINEL
	dw \1

	ENDM

REEL_CLIP: MACRO
	db \1
	dw \2 + (\3 * TILE_SIZE)
	db \4

	ENDM

ENDC
